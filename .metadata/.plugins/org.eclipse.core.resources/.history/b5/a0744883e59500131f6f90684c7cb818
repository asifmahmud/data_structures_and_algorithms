#ifndef HEAP_PRIORITY_QUEUE_HPP_
#define HEAP_PRIORITY_QUEUE_HPP_

#include <string>
#include <iostream>
#include <sstream>
#include <initializer_list>
#include "ics_exceptions.hpp"
#include "iterator.hpp"
#include "priority_queue.hpp"
#include <utility>              //For std::swap function
#include "array_stack.hpp"


namespace ics {

template<class T> class HeapPriorityQueue : public PriorityQueue<T>  {
  public:
    HeapPriorityQueue() = delete;
    explicit HeapPriorityQueue(bool (*agt)(const T& a, const T& b));
    HeapPriorityQueue(int initialLength,bool (*agt)(const T& a, const T& b));
    HeapPriorityQueue(const HeapPriorityQueue<T>& to_copy);
    //KLUDGE: not usable yet. HeapPriorityQueue(std::initializer_list<T> il,bool (*agt)(const T& a, const T& b));
    HeapPriorityQueue(ics::Iterator<T>& start, const ics::Iterator<T>& stop,bool (*agt)(const T& a, const T& b));
    virtual ~HeapPriorityQueue();

    virtual bool empty      () const;
    virtual int  size       () const;
    virtual T&   peek       () const;
    virtual std::string str () const;

    virtual int  enqueue (const T& element);
    virtual T    dequeue ();
    virtual void clear   ();

    virtual int enqueue (ics::Iterator<T>& start, const ics::Iterator<T>& stop);

    virtual HeapPriorityQueue<T>& operator = (const HeapPriorityQueue<T>& rhs);
    virtual bool operator == (const PriorityQueue<T>& rhs) const;
    virtual bool operator != (const PriorityQueue<T>& rhs) const;

    template<class T2>
    friend std::ostream& operator << (std::ostream& outs, const HeapPriorityQueue<T2>& p);

    virtual ics::Iterator<T>& abegin() const;
    virtual ics::Iterator<T>& aend  () const;

    class Iterator : public ics::Iterator<T> {
      public:
        //KLUDGE should be callable only in begin/end
        Iterator(HeapPriorityQueue<T>* fof, bool begin);
        Iterator(const Iterator& i);
        virtual ~Iterator();
        virtual T           erase();
        virtual std::string str  () const;
        virtual const ics::Iterator<T>& operator ++ ();
        virtual const ics::Iterator<T>& operator ++ (int);
        virtual bool operator == (const ics::Iterator<T>& rhs) const;
        virtual bool operator != (const ics::Iterator<T>& rhs) const;
        virtual T& operator *  () const;
        virtual T* operator -> () const;
      private:
        HeapPriorityQueue<T>  it;          //Copy of pq to use as iterator via dequeue
        HeapPriorityQueue<T>* ref_pq;
        int                   expected_mod_count;
        bool                  can_erase = true;
    };

    virtual Iterator begin() const;
    virtual Iterator end  () const;

  private:
    T*  pq;
    bool (*gt)(const T& a, const T& b);  // gt(a,b) = true iff a has higher priority than b
    int  length    = 0;                  //Physical length of array (must be > .size()
    int  used      = 0;                  //Amount of array used
    int  mod_count = 0;                  //For sensing concurrent modification
    void ensure_length(int new_length);
    int  left_child     (int i);         //Useful abstractions for heaps as arrays
    int  right_child    (int i);
    int  parent         (int i);
    bool is_root        (int i);
    bool in_heap        (int i);
    void percolate_up   (int i);
    void percolate_down (int i);
  };



//Insert constructor/methods here: see array_priority_queue.hpp
//template<class T>
//HeapPriorityQueue<T>::HeapPriorityQueue(){
//	pq = new T[length];
//}

template<class T>
HeapPriorityQueue<T>::HeapPriorityQueue(bool (*agt)(const T& a, const T& b)) : gt(agt){
	pq = new T[length];
}
template<class T>
HeapPriorityQueue<T>::HeapPriorityQueue(int initialLength,bool (*agt)(const T& a, const T& b)) : gt(agt){
	pq = new T[initialLength];
	length = initialLength;
}


template<class T>
HeapPriorityQueue<T>::HeapPriorityQueue(const HeapPriorityQueue<T>& to_copy) : gt(to_copy.gt), pq(new T[to_copy.size()])
{
	for (auto i = 0; i < to_copy.size(); ++i) {
		this->pq[i] = to_copy.pq[i];
	}
}


template<class T>
HeapPriorityQueue<T>::HeapPriorityQueue(ics::Iterator<T>& start, const ics::Iterator<T>& stop, bool (*agt)(const T& a, const T& b))
  : gt(agt) {
  enqueue(start,stop);
}

template<class T>
void HeapPriorityQueue<T>::ensure_length(int new_length) {
  if (length >= new_length)
    return;
  T*  old_pq  = pq;
  length = std::max(new_length,2*length);
  pq = new T[length];
  for (int i=0; i<used; ++i)
    pq[i] = old_pq[i];

  delete [] old_pq;
}

template<class T>
int  HeapPriorityQueue<T>::left_child     (int i){
	return 2*i + 1;
}

template<class T>
int  HeapPriorityQueue<T>::right_child (int i){
	return 2*i + 2;
}

template<class T>
int  HeapPriorityQueue<T>::parent(int i){
	return (i-1)/2;
}

template<class T>
bool HeapPriorityQueue<T>::is_root(int i){
	return i == 0;
}

template<class T>
bool HeapPriorityQueue<T>::in_heap(int i){
	return i <= used;
}

template<class T>
void HeapPriorityQueue<T>::percolate_up(int i){ // i = last index in array
//	if (is_root(i)){
//		return; // do nothing
//	}
//	else {
//		if (gt(pq[i], pq[parent(i)])){
//			std::swap(pq[i], pq[parent(i)]);
//		}
//		percolate_up(parent(i));
//	}

	while (!is_root(i)) {
		if (gt(pq[i] , pq[parent(i)])) {
			std::swap(pq[i], pq[parent(i)]);
			//std::cout << "swapped" << std::endl;
			i = parent(i);
		}
		else {
			break;
		}
	}
}

template<class T>
void HeapPriorityQueue<T>::percolate_down(int i){
	pq[i] = pq[used-1];
	int index;
	while (left_child(i) < used || right_child(i) < used) {
		index = (gt(pq[left_child(i)], pq[right_child(i)]) ? left_child(i) : right_child(i));
		if (gt (pq[i] ,  pq[index]) or gt (pq[index], pq[i])) {
			std::swap(pq[i], pq[index]);
			i = index;
		}
		else {
			break;
		}
	}
}

template<class T>
bool HeapPriorityQueue<T>::empty() const {
  return used == 0;
}

template<class T>
HeapPriorityQueue<T>::~HeapPriorityQueue() {
  delete[] pq;
}

template<class T>
inline int HeapPriorityQueue<T>::size() const {
	return used;
}

template<class T>
T& HeapPriorityQueue<T>::peek () const {
  if (this->empty())
	throw EmptyError("HeapPriorityQueue::peek");

  return pq[0];
}

template<class T>
std::string HeapPriorityQueue<T>::str() const {
	 std::ostringstream answer;
	 answer << *this << ",used=" << used << ",mod_count=" << mod_count << ")";
	 return answer.str();
}


template<class T>
int HeapPriorityQueue<T>::enqueue(const T& element) {
	this->ensure_length(used+1);
	pq[used] = element; // adds element at the end of array
	percolate_up(used); // swap the values until it fits structure
	used++;
	mod_count++;
	return 1;
}

template<class T>
T HeapPriorityQueue<T>::dequeue() {
  if (this->empty())
	throw EmptyError("HeapPriorityQueue::dequeue");
  else {
	T to_dequeue;
	to_dequeue = pq[0];
	percolate_down(0);
	used--;
	mod_count++;
	return to_dequeue;
  }


}

template<class T>
void HeapPriorityQueue<T>::clear() {
	pq = new T[length];
	used = 0;
	mod_count++;
}

template<class T>
int HeapPriorityQueue<T>::enqueue(ics::Iterator<T>& start, const ics::Iterator<T>& stop) {
  int count = 0;
  for (; start != stop; start++){
	 count += enqueue(*start);
  }
  return count;
}

template<class T>
HeapPriorityQueue<T>& HeapPriorityQueue<T>::operator = (const HeapPriorityQueue<T>& rhs) {
	  if (this == &rhs) {
		++mod_count;
		std::cout << "equals, *this" << std::endl;
	    return *this;
	  }
	  else {
		 gt = rhs.gt;
		 for (auto i = 0; i < rhs.used; ++i) {
			this->enqueue(rhs.pq[i]);
		 		//this->pq[i] = rhs.pq[i];
		 	}
		  ++mod_count;
		  return *this;
	  }

}

template<class T>
bool HeapPriorityQueue<T>::operator == (const PriorityQueue<T>& rhs) const {
	 if (this == &rhs)
	    return true;
	  if (used != rhs.size())
	    return false;
	  //KLUDGE: should check for == function used to prioritize, but cannot unless
	  //  this is made part of the PriorityQueue class (should it be? protected)?
	  ics::Iterator<T>& rhs_i = rhs.abegin();
	  std::cout << "iterator created" << std::endl;
	  for (int i=0; i<used; ++i, rhs_i++){
		  std::cout << "iterator is incremented " << i << " times" << std::endl;
	std::cout << "*rhs = "	<<  *rhs_i << std::endl;
	    if (pq[i] != *rhs_i)
	      return false;
	  }
	  return true;
}

template<class T>
bool HeapPriorityQueue<T>::operator != (const PriorityQueue<T>& rhs) const {
	std::cout << "testing !=" << std::endl;
	return !(*this == rhs);
}

template<class T>
std::ostream& operator << (std::ostream& outs, const HeapPriorityQueue<T>& p){

	if (p.empty()) {
	    outs << "priority_queue[]";
	  }else{
	    outs << "priority_queue[";
	    for (int i=0; i<p.used; ++i) {
	      outs << p.pq[i];
	      outs << (i == p.used-1 ? "]:highest" : ",");
	    }
	  }
	  return outs;
}


//Insert heap helper methods here.
/// percolate up and down here

//KLUDGE: memory-leak
template<class T>
auto HeapPriorityQueue<T>::abegin () const -> ics::Iterator<T>& {
  return *(new Iterator(const_cast<HeapPriorityQueue<T>*>(this),true));
}

//KLUDGE: memory-leak
template<class T>
auto HeapPriorityQueue<T>::aend () const -> ics::Iterator<T>& {
  return *(new Iterator(const_cast<HeapPriorityQueue<T>*>(this),false));
}

template<class T>
auto HeapPriorityQueue<T>::begin () const -> HeapPriorityQueue<T>::Iterator {
  return Iterator(const_cast<HeapPriorityQueue<T>*>(this),true);
}

template<class T>
auto HeapPriorityQueue<T>::end () const -> HeapPriorityQueue<T>::Iterator {
  return Iterator(const_cast<HeapPriorityQueue<T>*>(this),false);
}



//Insert Iterator constructor/methods here: see array_priority_queue.hpp
template<class T>
HeapPriorityQueue<T>::Iterator::Iterator(HeapPriorityQueue<T>* fof, bool begin) :it(*fof), ref_pq(fof) {
  expected_mod_count = ref_pq->mod_count;
  std::cout << "it = " << it << std::endl;

}

template<class T>
HeapPriorityQueue<T>::Iterator::Iterator(const Iterator& i): it(i.it), ref_pq(i.ref_pq){
	expected_mod_count = ref_pq->mod_count;

}

template<class T>
HeapPriorityQueue<T>::Iterator::~Iterator() {}

template<class T>
T HeapPriorityQueue<T>::Iterator::erase() {
//  if (expected_mod_count != ref_pq->mod_count)
//    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::erase");
//  if (!can_erase)
//    throw CannotEraseError("HeapPriorityQueue::Iterator::erase Iterator cursor already erased");
////  if (current < 0 || current >= ref_pq->used)
////    throw CannotEraseError("HeapPriorityQueue::Iterator::erase Iterator cursor beyond data structure");
//
//  can_erase = false;
//  T to_return = ref_pq->pq[current];
//  ref_pq->erase_at(current);
//  --current;
//  expected_mod_count = ref_pq->mod_count;
//  return to_return;
}
//
template<class T>
std::string HeapPriorityQueue<T>::Iterator::str() const {
  std::ostringstream answer;
  answer << ref_pq->str()  << "/expected_mod_count=" << expected_mod_count << "/can_erase=" << can_erase;
  return answer.str();
}
//
//
template<class T>
const ics::Iterator<T>& HeapPriorityQueue<T>::Iterator::operator ++ () {
  if (expected_mod_count != ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator ++");
  std::cout << "it = " << it << std::endl;
  this->it.dequeue();

  can_erase = true;
  return *this;

} //++i
//
////KLUDGE: creates garbage! (can return local value!)
template<class T>
const ics::Iterator<T>& HeapPriorityQueue<T>::Iterator::operator ++ (int) {
  if (expected_mod_count != ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator ++(int)");

  Iterator* to_return = new Iterator(*this); // copy constructor

  this->it.dequeue();

  can_erase = true;
  return *to_return;
} // i++
//
template<class T>
bool HeapPriorityQueue<T>::Iterator::operator == (const ics::Iterator<T>& rhs) const {
  const Iterator* rhsASI = dynamic_cast<const Iterator*>(&rhs);
  if (rhsASI == 0)
    throw IteratorTypeError("HeapPriorityQueue::Iterator::operator ==");
  if (expected_mod_count != ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator ==");
  if (ref_pq != rhsASI->ref_pq)
    throw ComparingDifferentIteratorsError("HeapPriorityQueue::Iterator::operator ==");

  return ref_pq->size() == rhsASI->ref_pq->size();
}
//
//
template<class T>
bool HeapPriorityQueue<T>::Iterator::operator != (const ics::Iterator<T>& rhs) const {
  const Iterator* rhsASI = dynamic_cast<const Iterator*>(&rhs);
  if (rhsASI == 0)
    throw IteratorTypeError("HeapPriorityQueue::Iterator::operator !=");
  if (expected_mod_count != ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator !=");
  if (ref_pq != rhsASI->ref_pq)
    throw ComparingDifferentIteratorsError("HeapPriorityQueue::Iterator::operator !=");
  return  ref_pq->used != rhsASI->ref_pq->used;
}
//
template<class T>
T& HeapPriorityQueue<T>::Iterator::operator *() const {
  if (expected_mod_count !=
      ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator *");
//  if (!can_erase || current < 0 || current >= ref_pq->used) {
//    std::ostringstream where;
//    where << current << " when size = " << ref_pq->size();
//    throw IteratorPositionIllegal("HeapPriorityQueue::Iterator::operator * Iterator illegal: "+where.str());
//  }
  if (!can_erase ){
	  std::ostringstream where;
      where << it.peek()<< " when size = " << ref_pq->size();
      throw IteratorPositionIllegal("HeapPriorityQueue::Iterator::operator * Iterator illegal: "+where.str());
  }
  //return ref_pq->pq[0];
  std::cout << "before peek" << std::endl;
  std::cout << "ref_pq.peek = " << it << std::endl;
  return ref_pq->peek();
}
//
template<class T>
T* HeapPriorityQueue<T>::Iterator::operator ->() const {
  if (expected_mod_count !=
      ref_pq->mod_count)
    throw ConcurrentModificationError("HeapPriorityQueue::Iterator::operator *");
  if (!can_erase) {
    std::ostringstream where;
    where <<  it.peek() << " when size = " << ref_pq->size();
    throw IteratorPositionIllegal("HeapPriorityQueue::Iterator::operator * Iterator illegal: "+where.str());
  }

  return &ref_pq->pq[0];
}

}

#endif /* HEAP_PRIORITY_QUEUE_HPP_ */
